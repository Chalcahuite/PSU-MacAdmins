#!/bin/bash
# autodisableSparkleVulnerableApps.sh
# Script to use Sparkle EA and Extinguish to generate profiles that disable the sparkle updater on the fly and install them. For use with the JSS.
# version 1.0 2016-05-22

#Define Logging
log_location="/Path/To/my.log"
ScriptLogging() #Log function to write to file stolen shamelessly from Rich Trouton
{

    DATE=$(date +2016-06-29\ 19:48:13)
    LOG="$log_location"

    echo "$DATE" " $1" >> $LOG
    echo "$DATE" " $1"
}

ScriptLogging "-----Disable Sparkle Vulnerable Apps-----"

##Variables
scriptPath=/Path/To/Scripts # <- path to where you put the necessary python scripts below
sparkleCheck=$scriptPath/Sparkle-MITM-Vuln-Apps.py
Extinguish=$scriptPath/extinguish.py
jamf=$(which jamf)
cert="Extinguish Cert Signing Test.mobileconfig" # <- Intermediate cert necessary for trust of signing cert.
certPath=/private/tmp/"$cert"
ProfileSigner=$scriptPath/ProfileSigner.py
SigningCert="3rd Party Mac Developer Application: Jane Doe (ABDCD12E34)" # <- Your signing cert goes here.
certURL="https://webserver.kabletown.com/Downloads/DisableSparkleVulnerableApps.mobileconfig" # <- URL where profile is hosted.

##Functions

myCurl () # Function to provide custom curl options. Stolen shamelessly from Rich Trouton's CasperCheck script.
{
  /usr/bin/curl -k --retry 3 --silent --show-error "$@";
}

getAppList() #Generate vulnerable app list using Ben Toms' Sparkle-MITM-Vuln-Apps.py
{
  if [[ -e "$sparkleCheck" ]]; then # <- If script is present generate a list.
    ScriptLogging "Generating vulnerable app list."
    appList=$("$sparkleCheck" | awk -F- '{print $2}' | sed -e 's/<[^>]*>//g') # <- get App IDs.
  else # <- if not, get it then generate a list.
    ScriptLogging "Sparkle Check script missing. Downloading."
    $jamf policy -event installSparkleScripts
    ScriptLogging "Generating vulnerable app list."
    appList=$(${sparkleCheck} | awk -F- '{print $2}' | sed -e 's/<[^>]*>//g') # <- get App IDs.
  fi
}

createProfile() #create profile from vulnerable app list using Allister Bank's Extinguish
{
  if [[ -z "$appList" ]]; then # <- if app list is empty, presume no vulnerable apps and exit. You're done \o/
    ScriptLogging "No vulnerable apps found. Exiting."
    ScriptLogging "-----END------"
    exit 0
  else
    for app in $appList; do # <- cycle through app list and generate a profile for each app listed.
      #ScriptLogging $app
      ScriptLogging "Generating profiles"
      "$Extinguish" -a $app -o "Kabletown Information Services" -p com.kabletown.kis.extinguish # <- Use your own org id here.
    done
  fi
}

signProfile() #sign profiles generated by Extinguish using Nick McSpadden's ProfileSigner
{
  wd=$(pwd) # <- what directory are we in again?
  ScriptLogging "Confirming profile(s) were generated."
  profiles=$(ls "$wd" | awk '/disable\_autoupdate/') # <- get list of profiles you just generated.
  if [[ -z "$profiles" ]]; then # <- Something went wrong if this is true. Exit out with error code.
    ScriptLogging "No profiles were generated."
    ScriptLogging "----END-----"
    exit 102
  else
    for p in $profiles; do # <- iterate through list of generated profiles and ...
      ScriptLogging "Signing generated profile $p."
      newName=$(echo $p | sed 's/.mobileconfig//g') # <- drop the extension to use the name.
      "$ProfileSigner" -k /Library/Keychains/System.keychain -n "$SigningCert" sign "$p" "$newName-signed.mobileconfig" # <- sign each profile and append as signed.
    done
  fi
}

installProfile() #Install signed profiles.
{
  wd=$(pwd) # <- what directory are we in again?
  ScriptLogging "Confirming profile(s) were signed."
  profiles=$(ls "$wd" | awk '/signed/') # <- get list of signed profiles.
  if [[ -z "$profiles" ]]; then # <- Something went wrong if this is true. Exit out with error code.
    ScriptLogging "No profiles were signed."
    ScriptLogging "----END-----"
    exit 103
  else
    for p in $profiles; do # <- iterate through list of signed profiles and install.
      ScriptLogging "Signing generated profile $p."
      /usr/bin/profiles -I -F "$wd"/"$p"
      done
  fi
}

getSigningCert() #download and install signing cert if not present.
{
  if [[ -e "$certPath" ]]; then # <- verify that intermediate cert profile is present and install if it's there.
    ScriptLogging "Signing Cert present. Installing into Keychain"
    /usr/bin/profiles -I -F "$certPath"
    #  /usr/bin/security  <- for future adjust trust settings for signing cert to eliminate user prompts if possible.
  else
    ScriptLogging "Signing Cert missing. Downloading and installing." # <- If it's missing download it and then install it.
    myCurl --output "$certPath" $certURL
    if [[ -e "$certPath" ]]; then
      /usr/bin/profiles -I -F "$certPath"
    #  /usr/bin/security  <- for future adjust trust settings for signing cert to eliminate user prompts if possible.
  else # <- something went wrong. Bail.
      ScriptLogging "Unable to download cert. Aborting."
      ScriptLogging "-----END-----"
      exit 101
    fi
  fi
}

verifySigningCert() #verify that signing cert is present.
{
  verifyCert=$(/usr/bin/security find-identity -p codesigning -v | awk '/3rd Party Mac Developer Application: Jane Doe \(ABDCD12E34\)/ {print $2}')
  if [[ -z "$verifyCert" ]]; then
    ScriptLogging "Signing Cert not installed. Installing"
    getSigningCert
  else
    ScriptLogging "Signing Cert installed. Proceeding."
  fi
}

cleanup() # remove all mobileconfig files. Leave no traces!
{
  wd=$(pwd) # <- seriously, where am I again?
  toRemove=$(ls "$wd" | awk '/disable/')
  if [[ -z "$toRemove" ]]; then # <- shouldn't be empty, but if it is you're done.
    ScriptLogging "No profiles to clean up."
  else
    ScriptLogging "Cleaning up profiles"
    for t in $toRemove; do # <- iterate through list of created mobile config files and delete for great justice.
      ScriptLogging "Deleting $t"
      /bin/rm "$wd"/"$t"
    done
  fi
  ScriptLogging "Removing signing certs."
  /usr/bin/profiles -R -F "$certPath"
  /bin/rm "$certPath"
}

##Execute
getAppList
createProfile
verifySigningCert
signProfile
installProfile
cleanup

ScriptLogging "-----End-----"
exit 0
